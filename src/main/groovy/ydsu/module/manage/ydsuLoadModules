#!/usr/bin/env ydsu-groovy-shebang
package ydsu.module.manage

import groovy.transform.BaseScript
import ydsu.module.manage.conf.PathConf
import ydsu.module.manage.source.ContainsRegularNonDocumentFile
import ydsu.module.util.conf.AppDataDirConf
import ydsu.module.util.source.*

import static ydsu.module.util.source.Exec.longCommand

@BaseScript LoggingBaseScript baseScript

/**
 * Loads the changes from the `module.yml` file. Git clones modules into `~/appdata/ydsu/cache/` and/or removes
 * the ones that are no longer present inside the `module.yml` file. Updates the ansible-managed block for ydsu's
 * system path inside `.bashrc`. Note that this command will not update existing modules, which can be done by the
 * `ydsuPull` command.
 */

void loadModules() {
    ModuleLoader moduleLoader = new ModuleLoader(ContainsRegularNonDocumentFile.instance,
            CurrentModule.instance.id,
            CurrentModule.instance.systemPath,
            'module')
    List<LocalModuleGroup> moduleGroups = moduleLoader.loadModuleGroups()
    generateSystemPathListString(moduleGroups)
    generateClasspathListString(moduleGroups)
    info '\n\n\n'
    if (moduleGroups) {
        info 'All done!'
    } else {
        warn 'System path and classpath configuration was cleared due to empty module list'
    }
    info '\n\n'
    info 'Please open a new terminal, or run the following in the existing one:'
    info ''
    info '    source ~/.bashrc'
    info ''
}

void generateSystemPathListString(List<LocalModuleGroup> moduleGroups) {
    StringBuilder sb = new StringBuilder()
    String internalModulesBaseDir = AppDataDirConf.INTERNAL_MODULES_BASE_DIR.replaceAll(AppDataDirConf.USER_HOME, '\\\$HOME')
    sb.append('        ').append(internalModulesBaseDir).append('manage').append(':\\\n')
    sb.append('        ').append(internalModulesBaseDir).append('util').append(':\\\n')
    TreeSet<String> allSystemPaths = moduleGroups.collect { it.systemPath }.flatten()
    if (allSystemPaths.isEmpty()) {
        warn "couldn't load any module"
    } else {
        allSystemPaths.each {
            sb.append('        ').append(it.replaceAll(AppDataDirConf.USER_HOME, '\\\$HOME')).append(':\\\n')
        }
    }
    sb.delete(sb.length() - 3, sb.length())
    // Pass the system path of the modules
    generateSystemPathPlaybook(sb.toString())
}

void generateSystemPathPlaybook(String systemPath) {
    def playbookYaml = """
---
- name: Configure system path for ydsu modules
  hosts: 127.0.0.1
  connection: local

  tasks:
  - name: Include ${PathConf.EXTEND_BASH_CONF} in ${PathConf.BASH_CONF}
    lineinfile:
      dest: ~/${PathConf.BASH_CONF}
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: EOF
      state: present
    with_items:
    - regexp: "^#?\\\\[\\\\[ -f ~/${PathConf.EXTEND_BASH_CONF} \\\\]\\\\]"
      line: '[[ -f ~/${PathConf.EXTEND_BASH_CONF} ]] && . ~/${PathConf.EXTEND_BASH_CONF}'
  - name: Insert/update system path configuration block in ${PathConf.EXTEND_BASH_CONF}
    blockinfile:
      path: ~/${PathConf.EXTEND_BASH_CONF}
      block: |
        PATH="\$PATH:\\
${systemPath}"
      marker: "${PathConf.SYSTEM_PATH_CONF_MARKER}"
      create: yes
  - name: Include ${PathConf.EXTEND_ZSH_CONF} in ${PathConf.ZSH_CONF}
    lineinfile:
      dest: ~/${PathConf.ZSH_CONF}
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      insertafter: EOF
      state: present
      create: yes
    with_items:
    - regexp: "^#?\\\\[\\\\[ -f ~/${PathConf.EXTEND_ZSH_CONF} \\\\]\\\\]"
      line: '[[ -f ~/${PathConf.EXTEND_ZSH_CONF} ]] && . ~/${PathConf.EXTEND_ZSH_CONF}'
  - name: Insert/update system path configuration block in ${PathConf.EXTEND_ZSH_CONF}
    blockinfile:
      path: ~/${PathConf.EXTEND_ZSH_CONF}
      block: |
        PATH="\$PATH:\\
${systemPath}"
      marker: "${PathConf.SYSTEM_PATH_CONF_MARKER}"
      create: yes      
"""
    PathConf.SYSTEM_PATH_WRITE_PLAYBOOK.write(playbookYaml)
    runPlaybook()
}

void runPlaybook() {
    longCommand("ansible-playbook ${PathConf.SYSTEM_PATH_WRITE_PLAYBOOK}")
}

void generateClasspathListString(List<LocalModuleGroup> moduleGroups) {
    StringBuilder sb = new StringBuilder()
    sb.append('List<String> classpathList = [')
    TreeSet<String> classpathList = moduleGroups.findAll { it.moduleGroupSystemPath }
            .collect { Classpath.from(it.moduleGroupSystemPath.systemPathRoot) }.flatten()
    classpathList << AppDataDirConf.INTERNAL_MODULES_CLASSPATH_ROOT
    new File(AppDataDirConf.INTERNAL_MODULES_CLASSPATH_ROOT).eachDirRecurse {
        classpathList << it.toString()
    }
    if (!classpathList.isEmpty()) {
        classpathList.each {
            sb.append('"').append(it.replaceAll(AppDataDirConf.USER_HOME, '\\\${System.getProperty(\'user.home\')}')).append('",\n')
        }
    }
    sb.delete(sb.length() - 2, sb.length()).append('].collect { it.toString() }')
    generateGroovyConfigScriptWithClasspath(sb.toString())
}

void generateGroovyConfigScriptWithClasspath(String classpathListString) {
    String groovyCompilerConf = """
package ydsu.module.util.conf
/**
 * For documentation refer to
 *
 * - http://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/control/CompilerConfiguration.html
 * - https://mrhaki.blogspot.gr/2016/01/groovy-goodness-customising-groovy.html
 *
 * Starting from the src/main/groovy directory, add all the subdirectories recursively to the classpath
 * (src/main/groovy/ydsu/module/util/../../../).
 */
${classpathListString}

String ydsuClasspath = System.getenv("YDSU_CLASSPATH")
if (ydsuClasspath) {
    classpathList.addAll(ydsuClasspath.tokenize(':'))
}

configuration.setClasspathList(classpathList)
// configuration.setScriptBaseClass('ysdu.util.source.LoggingBaseScript')
"""
    saveGroovyConfigScript(groovyCompilerConf)
}

void saveGroovyConfigScript(String groovyCompilerConf) {
    PathConf.GROOVY_COMPILER_WRITE_CONF.write(groovyCompilerConf)
}

loadModules()
